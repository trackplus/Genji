/**
 * Genji Scrum Tool and Issue Tracker
 * Copyright (C) 2015 Steinbeis GmbH & Co. KG Task Management Solutions

 * <a href="http://www.trackplus.com">Genji Scrum Tool</a>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* $Id:$ */

package com.aurel.track.persist;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

import com.aurel.track.beans.TReportLayoutBean;
import com.aurel.track.dao.ReportLayoutDAO;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Wed Feb 23 16:15:14 CET 2005]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class TReportLayoutPeer
	extends com.aurel.track.persist.BaseTReportLayoutPeer implements ReportLayoutDAO{
	private static final long serialVersionUID = 5707278146133302715L;
	static private Logger LOGGER = LogManager.getLogger(TReportLayoutPeer.class);
	/*public static void doDeleteByProjectOID(Integer projectId) {
		// delete all entries in the report layout section, if any
		try {
			Criteria crit = new Criteria();
			crit.add(BaseTReportLayoutPeer.PROJECT, projectId, Criteria.EQUAL);
			log.debug("deleting entries in report layout for project oid " + projectId);
			doDelete(crit);
		}
		catch (Exception e) {
			log.debug("Exception when trying to delete entry from "
						 + "report layout for project oid " + projectId + "\r\n"
						 + e.getMessage(), e);
		}
	}*/

	/**
	 * @param personKey
	 * @return list of reportLayout elements for this personKey
	 */
	/*public static List getByPerson(Integer personKey) {
		Criteria crit = new Criteria();
		crit.add(PERSON, personKey);
		crit.addSelectColumn(TAttributePeer.ATTRIBUTENAME);
		crit.addSelectColumn(FPOSITION);
		crit.addJoin(REPORTFIELD, TAttributePeer.OBJECTID);
		crit.addAscendingOrderByColumn(FPOSITION);

		// try to do the select
		List resultList;
		try {
			resultList = doSelectVillageRecords(crit);
		} catch (TorqueException e) {
			log.error("doSelect faild with: " + e);
			resultList = new ArrayList(0);
		}
		
		// populate the object(s)
		List result = new ArrayList(resultList.size());
		try {
			for (int i = 0; i < resultList.size(); i++)
			{
				Record row = (Record) resultList.get(i);
				LabelValueBean member= new LabelValueBean();
				populateObject(row, member);
				result.add(member);
			 }
		} catch (TorqueException e) {
			log.error("Loading report layout member failed: " + e);
		}
		return result;
	}*/
	
	/*public static void populateObject(Record row, LabelValueBean obj)
	throws TorqueException {
			try {
				obj.setLabel(row.getValue(TAttributePeer.ATTRIBUTENAME).asString());
				obj.setValue(row.getValue(FPOSITION).asString());
				// doesn't work for Oracle and Postgres this way			  
			} catch (DataSetException e) {
				try { // again
				obj.setLabel(row.getValue(1).asString()); // values are 1 based
				obj.setValue(row.getValue(2).asString());				
				}
				catch (DataSetException de) {
					throw new TorqueException(de);
				}
			}
	}*/
	
	/**
	 * retrieve a specific layout element
	 * @param personKey
	 * @param position
	 * @return a reportLayout element, or null
	 */
	private static TReportLayout getByPersonAndPosition(Integer personKey, Integer position) {
		Criteria crit = new Criteria();
		if (personKey!=null) {
			crit.add(PERSON, personKey);
		}else{
			crit.add(PERSON,personKey,Criteria.ISNULL);
		}
		crit.add(FPOSITION, position);

		// try to do the select
		TReportLayout result = null;
		try {
			List resultList = doSelect(crit);
			if(resultList.size() > 0) {
				result = (TReportLayout) resultList.get(0);
			}
		} catch (TorqueException e) {
			;
		}
		
		return result;
	}

	/**
	 * retrieve a specific layout element
	 * @param personKey
	 * @param position
	 * @return a reportLayout element (never null)
	 */
	/*public static TReportLayout getByPersonAndPositionNotNull(Integer personKey, Integer position) {
		TReportLayout result = getByPersonAndPosition(personKey, position);
		if(result == null) {
			result = new TReportLayout();
			result.setFieldPosition(position);
		}
		
		return result;
	}*/

	/**
	 * @param personKey
	 * @param position
	 */
	public static void doDeleteByPersonAndPosition(Integer personKey, Integer position) {
		TReportLayout layout = getByPersonAndPosition(personKey, position);
		if(layout != null) {
			try {
				BaseTReportLayoutPeer.doDelete(layout);
			} catch (TorqueException e) {
				LOGGER.error("Delete col failed with: " + e);
			}
		}
	}
	@Override
	public TReportLayoutBean loadByPrimaryKey(Integer objectID){
		TReportLayout tobject = null;
		try {
			tobject = retrieveByPK(objectID);
		} catch(Exception e){
			LOGGER.warn("Loading of a reportLayout by primary key " + objectID + " failed with " + e.getMessage());
			LOGGER.debug(ExceptionUtils.getStackTrace(e));
		}
		if (tobject!=null){
			return tobject.getBean();
		}
		return null;

	}

	@Override
	public List loadAll() {
		List torqueList = null;
		Criteria crit = new Criteria();
		try {
			torqueList = doSelect(crit);
		} catch (TorqueException e) {
			LOGGER.error("Loading all failed with " + e.getMessage());
		}
		return convertTorqueListToBeanList(torqueList);
	}
	
	
	@Override
	public List getByPerson(Integer personKey, boolean grouping, Integer layoutType) {
		List torqueList = null;
		Criteria crit = new Criteria();
		if (personKey!=null) {
			crit.add(PERSON, personKey);
		}else{
			crit.add(PERSON,personKey,Criteria.ISNULL);
		}
		if (grouping) {
			crit.add(FIELDTYPE, TReportLayoutBean.FIELD_TYPE.GROUP);
		} else {
			crit.add(FIELDTYPE, TReportLayoutBean.FIELD_TYPE.GROUP, Criteria.NOT_EQUAL);
		}
		crit.add(QUERYTYPE,(Object)null,Criteria.ISNULL);
		crit.add(QUERYID,(Object)null,Criteria.ISNULL );
		crit.add(LAYOUTKEY, layoutType);
		crit.addAscendingOrderByColumn(FPOSITION);
		try {
			torqueList = doSelect(crit);
		} catch (TorqueException e) {
			LOGGER.error("Loading ReportLayout for key:"+personKey+" failed with " + e.getMessage());
		}
		return convertTorqueListToBeanList(torqueList);
	}
	@Override
	public List<TReportLayoutBean> getByQuery(Integer personKey,Integer queryType,Integer queryID){
		List torqueList = null;
		Criteria crit = new Criteria();
		if (personKey!=null) {
			crit.add(PERSON, personKey);
		}else{
			crit.add(PERSON,personKey,Criteria.ISNULL);
		}
		crit.add(FIELDTYPE, TReportLayoutBean.FIELD_TYPE.GROUP, Criteria.NOT_EQUAL);
		crit.add(LAYOUTKEY, Integer.valueOf(TReportLayoutBean.LAYOUT_TYPE.REPORT_OVERVIEW));
		if(queryType==null){
			crit.add(QUERYTYPE,(Object)null,Criteria.ISNULL);
			crit.add(QUERYID,(Object)null,Criteria.ISNULL );
		}else{
			crit.add(QUERYTYPE, queryType);
			if(queryID==null){
				crit.add(QUERYID,(Object)null,Criteria.ISNULL );
			}else{
				crit.add(QUERYID, queryID);
			}
		}
		crit.addAscendingOrderByColumn(FPOSITION);
		try {
			torqueList = doSelect(crit);
		} catch (TorqueException e) {
			LOGGER.error("Loading ReportLayout for key:"+personKey+" failed with " + e.getMessage());
		}
		return convertTorqueListToBeanList(torqueList);
	}
	@Override
	public void save(List layout) {
		if(layout==null||layout.isEmpty()){
			return;
		}
		Connection con = null;
		try{
			con = Transaction.begin(DATABASE_NAME);
			Integer personKey=((TReportLayoutBean)layout.get(0)).getPerson();
			for (Iterator iter = layout.iterator(); iter.hasNext();) {
				TReportLayoutBean reportLayoutBean = (TReportLayoutBean) iter.next();
				BaseTReportLayout.createTReportLayout(reportLayoutBean).save(con);
			}
			Transaction.commit(con);
		} catch (TorqueException e) {
			Transaction.safeRollback(con);
			LOGGER.error("Saving reportLayouts failed with: " + e);
		}  
	}
	@Override
	public void save(TReportLayoutBean reportLayoutBean){
		try {
			BaseTReportLayout.createTReportLayout(reportLayoutBean).save();
		} catch (TorqueException e) {
			LOGGER.error("Saving reportLayouts failed with: " + e);
		} catch (Exception e) {
			LOGGER.error("Saving reportLayouts failed with: " + e);
		}
	}
	@Override
	public void remove(TReportLayoutBean reportLayoutBean) {
		doDeleteByPersonAndPosition(reportLayoutBean.getPerson(), reportLayoutBean.getFieldPosition());
	}
	@Override
	public void removeByPerson(Integer personKey, /*Integer fieldType,*/ Integer layoutType){
		Criteria crit = new Criteria();
		if (personKey!=null) {
			crit.add(PERSON, personKey);
		}else{
			crit.add(PERSON,personKey,Criteria.ISNULL);
		}
		//crit.add(FIELDTYPE, fieldType);
		crit.add(LAYOUTKEY, layoutType);
		try {
			doDelete(crit);
		} catch (TorqueException e) {
			LOGGER.error("Remove reportLayouts by person failed with: " + e);
		}
	}
	@Override
	public void removeByQueryPerson(Integer personKey,Integer queryType,Integer queryID){
		Criteria crit = new Criteria();
		if (personKey!=null) {
			crit.add(PERSON, personKey);
		}else{
			crit.add(PERSON,personKey,Criteria.ISNULL);
		}
		//crit.add(FIELDTYPE, fieldType);
		crit.add(LAYOUTKEY, Integer.valueOf(TReportLayoutBean.LAYOUT_TYPE.REPORT_OVERVIEW));
		if(queryType==null){
			crit.add(QUERYTYPE,(Object)null,Criteria.ISNULL);
			crit.add(QUERYID,(Object)null,Criteria.ISNULL );
		}else{
			crit.add(QUERYTYPE, queryType);
			if(queryID==null){
				crit.add(QUERYID,(Object)null,Criteria.ISNULL );
			}else{
				crit.add(QUERYID, queryID);
			}
		}
		try {
			doDelete(crit);
		} catch (TorqueException e) {
			LOGGER.error("Remove reportLayouts by person failed with: " + e);
		}
	}
	@Override
	public void removeByPersonAndReportFieldNotIn(Integer personKey, Integer layoutType,List<Integer> remainIds,Integer queryType,Integer queryID){
		Criteria crit = new Criteria();
		if (personKey!=null) {
			crit.add(PERSON, personKey);
		}else{
			crit.add(PERSON,personKey,Criteria.ISNULL);
		}
		//crit.add(FIELDTYPE, fieldType);
		crit.add(LAYOUTKEY, layoutType);
		if(remainIds!=null && !remainIds.isEmpty()){
			crit.addNotIn(REPORTFIELD,remainIds);
		}
		if(queryType==null){
			crit.add(QUERYTYPE,(Object)null,Criteria.ISNULL);
			crit.add(QUERYID,(Object)null,Criteria.ISNULL );
		}else{
			crit.add(QUERYTYPE, queryType);
			if(queryID==null){
				crit.add(QUERYID,(Object)null,Criteria.ISNULL );
			}else{
				crit.add(QUERYID, queryID);
			}
		}
		try {
			doDelete(crit);
		} catch (TorqueException e) {
			LOGGER.error("Remove reportLayouts by person failed with: " + e);
		}
	}
	private List convertTorqueListToBeanList(List torqueList) {
		List beanList = new ArrayList();
		if (torqueList!=null){
			Iterator itrTorqueList = torqueList.iterator();
			while (itrTorqueList.hasNext()){
				beanList.add(((TReportLayout)itrTorqueList.next()).getBean());
			}
		}
		return beanList;
	}
 }
