/**
 * Genji Scrum Tool and Issue Tracker
 * Copyright (C) 2015 Steinbeis GmbH & Co. KG Task Management Solutions

 * <a href="http://www.trackplus.com">Genji Scrum Tool</a>

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* $Id:$ */


package com.aurel.track.persist;


import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.apache.torque.om.Persistent;

import com.aurel.track.beans.TSystemStateBean;

/** 
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Fri Jun 14 10:06:48 GMT+02:00 2002]
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 */
public  class TRelease 
    extends com.aurel.track.persist.BaseTRelease
    implements Persistent, SortedObject
{

	private static final Logger LOGGER = LogManager.getLogger(TRelease.class); 
	
    private static final long serialVersionUID = -1877904226135418744L;
    
    /**
     * Overrides the base save with lucene indexing
     */
    /*public void save()
    {
    	//when isNew we do not need to lock with the IndexReader
    	boolean isNew = false;
        try {
        	isNew = (getObjectID() == null);        		
			super.save();
			if (isNew)
			{
				LuceneIndexer.addToNotLocalizedLookupIndex(
		    		  new LabelValueBean(getLabel(), getObjectID().toString()),
		    		  LuceneUtil.LOOKUPENTITYTYPES_NOTLOCALIZED.RELEASE);
			}
			else
			{
				LuceneIndexer.updateNotLocalizedLookupIndex(
		    		  new LabelValueBean(getLabel(), getObjectID().toString()),
		    		  LuceneUtil.LOOKUPENTITYTYPES_NOTLOCALIZED.RELEASE);
			}    
		} catch (Exception e) {
			LOGGER.error("Saving the release failed with " + e.getMessage(), e);
			
		}     	
     }*/
    
    public String getFullName()
    {
    	String label = getLabel();
    	if (label == null)
    	{
    		label = "";
    	}
    	try
    	{
    		int stateFlag = getTSystemState().getStateflag().intValue();    		
    		if (stateFlag == TSystemStateBean.STATEFLAGS.INACTIVE)
	    	{
	    		label += " *";	    		
	    	}
    		else if (stateFlag == TSystemStateBean.STATEFLAGS.CLOSED)
    		{
	    		label += " **";	    		    		
    		}
    			
    	}
    	catch(Exception e)
    	{
    		LOGGER.error("Getting the fully name by stateFlag failed with " + e.getMessage(), e);
    	}
    	return label;
    }
    
    public String getFullName(boolean inactive)
    {
    	String label = getLabel();
    	if (label == null)
    	{
    		label = "";
    	}
    	if (inactive)
    	{
    		label += " *";
    	}
    	return label;
    }
}
