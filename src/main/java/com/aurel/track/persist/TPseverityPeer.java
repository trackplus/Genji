/**
 * Genji Scrum Tool and Issue Tracker
 * Copyright (C) 2015 Steinbeis GmbH & Co. KG Task Management Solutions

 * <a href="http://www.trackplus.com">Genji Scrum Tool</a>

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* $Id:$ */

package com.aurel.track.persist;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

import com.aurel.track.beans.TPseverityBean;
import com.aurel.track.dao.PSeverityDAO;
import com.workingdogs.village.DataSetException;
import com.workingdogs.village.Record;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Mon Feb 14 15:14:25 CET 2005]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class TPseverityPeer
	extends com.aurel.track.persist.BaseTPseverityPeer
	implements PSeverityDAO
{
	
	private static final long serialVersionUID = 4337182914217647055L;

	private static final Logger LOGGER = LogManager.getLogger(TPseverityPeer.class);

	/**
	 * Loads all TPseverityBeans 
	 * @return
	 */
	public List<TPseverityBean> loadAll() {
		Criteria crit = new Criteria();
		try {
			return convertTorqueListToBeanList(doSelect(crit));
		} catch (TorqueException e) {
			LOGGER.error("Loading all pseverities failed with " + e.getMessage(), e);
			return new LinkedList<TPseverityBean>();
		}
	}
	
	/**
	 * Gets the number of valid severities for issue types in a projectType
	 * @param projectTypeID
	 * @return
	 */
	public Map<Integer, Integer> loadNumberOfSeveritiesForIssueTypesInProjectType(Integer projectTypeID) {
		Map<Integer, Integer> numberOfSeveritiesForIssueTypes = new HashMap<Integer, Integer>();
		Criteria crit = new Criteria();
		crit.add(PROJECTTYPE, projectTypeID);
		String countSeverities = "COUNT(" + SEVERITY + ")";
		crit.addSelectColumn(countSeverities);
		crit.addSelectColumn(LISTTYPE);
		crit.addGroupByColumn(LISTTYPE);
		List<Record> records = new LinkedList<Record>();
		try {
			records = doSelectVillageRecords(crit);
		} catch(Exception e) {
			LOGGER.error("Groupping the severities by issueTypes in projectType " + projectTypeID + " failed with " + e.getMessage(), e);
		}
		try {
			if (records!=null && !records.isEmpty()) {
				for (Record record : records) {
					Integer numberOfPersons = record.getValue(1).asIntegerObj();
					Integer roleID = record.getValue(2).asIntegerObj();
					numberOfSeveritiesForIssueTypes.put(roleID, numberOfPersons); 
				}
			}
		} catch (Exception e) {
			LOGGER.error("Getting the number of severities by issueTypes in projectType " + projectTypeID + " failed with " + e.getMessage(), e);
		}
		return numberOfSeveritiesForIssueTypes;
	}
	
	/**
	 * Gets the number of valid severities for an issue type in a projectType
	 * @param projectTypeID
	 * @param issueTypeID
	 * @return
	 */
	public Integer loadNumberOfSeveritiesForIssueTypeInProjectType(Integer projectTypeID, Integer issueTypeID) {
		Criteria crit = new Criteria();
		crit.add(PROJECTTYPE, projectTypeID);
		crit.add(LISTTYPE, issueTypeID);
		String countSeverities = "COUNT(" + SEVERITY + ")";
		crit.addSelectColumn(countSeverities);
		try {
			return ((Record) doSelectVillageRecords(crit).get(0)).getValue(1).asIntegerObj();
		} catch (TorqueException e) {
			LOGGER.error("Counting the severities in projectTypeID " + projectTypeID + " and issueTypeID " +
					issueTypeID + " failed with TorqueException " + e.getMessage(), e);
		} catch (DataSetException e) {
			LOGGER.error("Counting the severities in projectTypeID " + projectTypeID + " and issueTypeID " +
					issueTypeID + " failed with DataSetException " + e.getMessage(), e);
		}
		return Integer.valueOf(0);
	}
	
	/**
	 * Load TPseverityBeans by project type
	 * @param projectType
	 * @return
	 */
	public List<TPseverityBean> loadByProjectType(Integer projectType) {
		Criteria crit = new Criteria();
		crit.add(PROJECTTYPE, projectType, Criteria.EQUAL); 
		try {
			return convertTorqueListToBeanList(doSelect(crit));
		}
		catch (Exception e) {
			LOGGER.error("Loading by project type " +  projectType + " failed with " + e.getMessage(), e);
			return new ArrayList<TPseverityBean>();
		}
	}
	
	/**
	 * Load TPseverityBeans by project types and severities
	 * @param projectType
	 * @param severities
	 * @return
	 */
	public List<TPseverityBean> loadByProjectTypeAndSeverities(Integer projectType, List<Integer> severities) {
		if (severities==null || severities.isEmpty() || projectType==null) {
			return new ArrayList<TPseverityBean>();
		}
		Criteria crit = new Criteria();
		crit.add(PROJECTTYPE, projectType, Criteria.EQUAL);
		crit.addIn(SEVERITY, severities);
		try {
			return convertTorqueListToBeanList(doSelect(crit));
		}
		catch (Exception e) {
			LOGGER.error("Loading by project type " +  projectType + " and severities " + severities.size()+ " failed with " + e.getMessage(), e);
			return new ArrayList<TPseverityBean>();
		}
	}
	
	/**
	 * Load TPseverityBeans by project types and issueType
	 * @param projectType
	 * @param issueType
	 * @return
	 */
	public List<TPseverityBean> loadByProjectTypeAndIssueType(Integer projectType, Integer issueType) {
		Criteria crit = new Criteria();
		crit.add(PROJECTTYPE, projectType);
		crit.add(LISTTYPE, issueType);
		crit.add(SEVERITY, 0, Criteria.NOT_EQUAL);
		try {
			return convertTorqueListToBeanList(doSelect(crit));
		} catch (TorqueException e) {
			LOGGER.error("Getting the severities allowed by project type "+ projectType + 
					" and issue type " + issueType + " failed with " + e.getMessage(), e);
			 return new LinkedList<TPseverityBean>();
		}
	}
	
	/**
	 * Load TPseverityBeans by project types and issueTypes
	 * @param projectType
	 * @param issueTypes
	 * @return
	 */
	public List<TPseverityBean> loadByProjectTypeAndIssueTypes(Integer projectType, List<Integer> issueTypes) {
		if (issueTypes==null || issueTypes.isEmpty() || projectType==null) {
			return new ArrayList<TPseverityBean>();
		}		
		Criteria crit = new Criteria();
		crit.add(PROJECTTYPE, projectType);
		crit.addIn(LISTTYPE, issueTypes);
		crit.add(SEVERITY, 0, Criteria.NOT_EQUAL);
		try {
			return convertTorqueListToBeanList(doSelect(crit));
		} catch (TorqueException e) {
			LOGGER.error("Getting the severities allowed by project type "+ projectType + 
					" and issue types " + issueTypes.size() + " failed with " + e.getMessage(), e);
			 return new ArrayList<TPseverityBean>();
		}
	}
	
	/**
	 * Save  TPseverityBean in the TPseverity table
	 * @param pseverityBean
	 * @return
	 */
	public Integer save(TPseverityBean pseverityBean) {
		TPseverity tpPseverity;
		try {
			tpPseverity = BaseTPseverity.createTPseverity(pseverityBean);
			tpPseverity.save();
			return tpPseverity.getObjectID();
		} catch (Exception e) {
			LOGGER.error("Saving of an pseverityBean failed with " + e.getMessage(), e);
			return null;
		}
	}
	
	/**
	 * Deletes a TPseverityBean from the TPseverity table 
	 * @param objectID
	 * @return
	 */
	public void delete(Integer objectID) {
		Criteria crit = new Criteria();
		crit.add(OBJECTID, objectID);
		try {
			doDelete(crit);
		} catch (TorqueException e) {
			LOGGER.error("Deleting the TPseverityBean " + objectID + " failed with: " + e);
		}
	}
	
	/**
	 * Deletes TPseverityBean(s) from the TPseverity table 
	 * @param projectTypeID
	 * @param itemTypeID
	 * @param severityIDs
	 */
	public void delete(Integer projectTypeID, Integer itemTypeID, List<Integer> severityIDs) {
		if (projectTypeID==null || itemTypeID==null || severityIDs==null || severityIDs.isEmpty()) {
			return;
		}
		Criteria crit = new Criteria();
		crit.add(PROJECTTYPE, projectTypeID);
		crit.add(LISTTYPE, itemTypeID);
		crit.addIn(SEVERITY, severityIDs);
		try {
			doDelete(crit);
		} catch (TorqueException e) {
			LOGGER.error("Deleting the TPstateBean by projectType " + projectTypeID +
					" and issueType " + itemTypeID + " and severities " + severityIDs.size() + " failed with: " + e);
		}
	}
	
	private List<TPseverityBean> convertTorqueListToBeanList(List<TPseverity> torqueList) {
		List<TPseverityBean> beanList = new LinkedList<TPseverityBean>();
		if (torqueList!=null){
			Iterator<TPseverity> itrTorqueList = torqueList.iterator();
			while (itrTorqueList.hasNext()){
				beanList.add(itrTorqueList.next().getBean());
			}
		}
		return beanList;
	}
}
