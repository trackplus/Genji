/**
 * Genji Scrum Tool and Issue Tracker
 * Copyright (C) 2015 Steinbeis GmbH & Co. KG Task Management Solutions

 * <a href="http://www.trackplus.com">Genji Scrum Tool</a>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* $Id:$ */


package com.aurel.track.persist;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

import com.aurel.track.beans.TFieldBean;
import com.aurel.track.beans.TProjectTypeBean;
import com.aurel.track.dao.DAOFactory;
import com.aurel.track.dao.ProjectTypeDAO;


/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Tue Jun 15 21:31:34 CEST 2004]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class TProjectTypePeer extends com.aurel.track.persist.BaseTProjectTypePeer
	implements ProjectTypeDAO
{

	private static final long serialVersionUID = 2123060212088032441L;
	private static final Logger LOGGER = LogManager.getLogger(TProjectTypePeer.class); 
		
	//do not delete the project type specific field, only the project type specific field configurations if they are configurations for other (non project type specific) fields
	//if there is a project type specific field then also the corresponding project type specific field configurations should be replaced and not deleted
	//(otherwise there would exist a project type specific field without any project type specific configuration)
	//but the project type specific field configurations for the other fields (non project type specific fields) should be deleted
	
	private static Class[] replacePeerClasses = {
		TProjectPeer.class,
		TRolePeer.class,
		TDocStatePeer.class,
		TDisableFieldPeer.class,
		TScriptsPeer.class,
		TFieldPeer.class 
	};
	
	private static String[] replaceFields = {
		TProjectPeer.PROJECTTYPE,
		TRolePeer.PROJECTTYPE,
		TDocStatePeer.PROJECTTYPE,
		TDisableFieldPeer.PROJECTTYPE,
		TScriptsPeer.PROJECTTYPE,
		TFieldPeer.PROJECTTYPE
	};
	   
	private static Class[] deletePeerClasses = {
		TWorkFlowPeer.class,
		TPpriorityPeer.class,
		TPseverityPeer.class,
		TPlistTypePeer.class,
		TPstatePeer.class,
		TReportLayoutPeer.class,
		TFieldConfigPeer.class, //overrided doDelete
		TScreenConfigPeer.class,
		TScreenPeer.class, //overrided doDelete
		TEventPeer.class,
		TWorkflowConnectPeer.class,
		TPRolePeer.class,
		TChildProjectTypePeer.class,
		TChildProjectTypePeer.class,
		TProjectTypePeer.class
	};
	
	private static String[] deleteFields = {
		TWorkFlowPeer.PROJECTTYPE,
		TPpriorityPeer.PROJECTTYPE,
		TPseverityPeer.PROJECTTYPE,
		TPlistTypePeer.PROJECTTYPE,
		TPstatePeer.PROJECTTYPE,
		TReportLayoutPeer.PROJECTTYPE,
		TFieldConfigPeer.PROJECTTYPE,
		TScreenConfigPeer.PROJECTTYPE,
		TScreenPeer.PROJECTTYPE,
		TEventPeer.PROJECTTYPE,
		TWorkflowConnectPeer.PROJECTTYPE,
		TPRolePeer.PROJECTTYPE,
		TChildProjectTypePeer.PROJECTTYPEPARENT,
		TChildProjectTypePeer.PROJECTTYPECHILD,
		TProjectTypePeer.OBJECTID
	};
	
	

	@Override
	public void replaceAndDelete(Integer oldOID, Integer newOID){
		if (newOID!=null) {
			List<TFieldBean> projectTypeSpecificFields = DAOFactory.getFactory().getFieldDAO().loadByProjectType(oldOID);
			if (projectTypeSpecificFields!=null && !projectTypeSpecificFields.isEmpty()) {
				//replace the project type specific field configurations but only for project type specific fields
				for (TFieldBean fieldBean : projectTypeSpecificFields) {
					Integer fieldID = fieldBean.getObjectID();
					Criteria selectCriteria = new Criteria();
					Criteria updateCriteria = new Criteria();
					selectCriteria.add(TFieldConfigPeer.PROJECTTYPE, oldOID);
					selectCriteria.add(TFieldConfigPeer.FIELDKEY, fieldID);
					updateCriteria.add(TFieldConfigPeer.PROJECTTYPE, newOID);
					try {
						TFieldChangePeer.doUpdate(selectCriteria, updateCriteria);
					} catch (TorqueException e) {
						LOGGER.error("Replacing the project type specific field configs for project type " + oldOID + " and field " + fieldID + " failed with " + e.getMessage());
						LOGGER.debug(ExceptionUtils.getStackTrace(e));
					}
				}
			}
			ReflectionHelper.replace(replacePeerClasses, replaceFields, oldOID, newOID);
		}
		ReflectionHelper.delete(deletePeerClasses, deleteFields, oldOID);
	}
	
	/**
	 * This method verifies wheteher <code>ProjectType</code> 
	 * is used in other tables in the database.
	 * @param oldOID object identifier of list type to be replaced
	 */
	@Override
	public boolean hasDependentData(Integer oldOID){
		return ReflectionHelper.hasDependentData(replacePeerClasses, replaceFields, oldOID);
	}
	
	/**
	 * Loads a projectType by primary key
	 * @param objectID
	 * @return
	 */
	@Override
	public TProjectTypeBean loadByPrimaryKey(Integer objectID) {
		TProjectType tProjectType = null;
		try {
			tProjectType = retrieveByPK(objectID);
		} catch(Exception e) {
			LOGGER.warn("Loading of a projectType by primary key " + objectID + " failed with " + e.getMessage());
			LOGGER.debug(ExceptionUtils.getStackTrace(e));
		} 
		if (tProjectType!=null) {
			return tProjectType.getBean();
		}
		return null;
	}


	/**
	 * Loads all projectTypes
	 * @return
	 */
	@Override
	public List<TProjectTypeBean> loadAll() {
		Criteria crit = new Criteria();
		crit.addAscendingOrderByColumn(LABEL);
		try {
			return convertTorqueListToBeanList(doSelect(crit));
		}
		catch (Exception e) {
			LOGGER.error("Loading of all projectTypes failed with " + e.getMessage());
			return null;
		}
	}
	
	
	
	/**
	 * Loads all non private projectTypeBeans 
	 * @return 
	 */
	@Override
	public List<TProjectTypeBean> loadNonPrivate() {
		Criteria crit = new Criteria();
		crit.add(OBJECTID, 0, Criteria.GREATER_EQUAL);
		crit.addAscendingOrderByColumn(LABEL);
		try {
			return convertTorqueListToBeanList(doSelect(crit));
		}
		catch (Exception e) {
			LOGGER.error("Loading non private projectTypes failed with " + e.getMessage());
			return null;
		}
	}
	
	/**
	 * Loads all private projectTypeBeans 
	 * @return 
	 */
	@Override
	public List<TProjectTypeBean> loadPrivate() {
		Criteria crit = new Criteria();
		crit.add(OBJECTID, 0, Criteria.LESS_THAN);
		crit.addAscendingOrderByColumn(LABEL);
		try {
			return convertTorqueListToBeanList(doSelect(crit));
		}
		catch (Exception e) {
			LOGGER.error("Loading private projectTypes failed with " + e.getMessage());
			return null;
		}
	}
	
	/**
	 * Loads project type beans by IDs 
	 * @param projectTypeIDs
	 * @return
	 */
	@Override
	public List<TProjectTypeBean> loadByProjectTypeIDs(List<Integer> projectTypeIDs) {
		if (projectTypeIDs==null || projectTypeIDs.isEmpty()) {
			LOGGER.warn("No projectTypeIDs specified " + projectTypeIDs);
			return new LinkedList<TProjectTypeBean>();
		}
		Criteria crit = new Criteria();
		crit.addAscendingOrderByColumn(LABEL);
		crit.addIn(OBJECTID, projectTypeIDs); 
		try {
			return convertTorqueListToBeanList(doSelect(crit));
		}
		catch (Exception e) {
			LOGGER.error("Loading of project types by IDs failed with " + e.getMessage());
			return null;
		}
	}
	
	/**
	 * Whether all project types have issueType restrictions 
	 * @param projectTypeIDs
	 * @return
	 */
	@Override
	public boolean allHaveIssueTypeRestrictions(Object[] projectTypeIDs) {
		List torqueList = null;
		if (projectTypeIDs==null || projectTypeIDs.length==0) {
			return false;
		}
		Criteria crit = new Criteria();		
		crit.addJoin(OBJECTID, BaseTPlistTypePeer.PROJECTTYPE);
		crit.addIn(OBJECTID, projectTypeIDs);
		crit.setDistinct();
		try {
			torqueList =  doSelect(crit);
		}
		catch (Exception e) {
			LOGGER.error("Loading projectTypes which have issue type restrictions failed with " + e.getMessage());
			return false;
		}
		return projectTypeIDs.length==torqueList.size();
	}
	
	/**
	 * Save  projectType in the TProjectType table
	 * @param projectType
	 * @return
	 */
	@Override
	public Integer save(TProjectTypeBean projectTypeBean) {
		TProjectType tProjectType;		
		try {
			tProjectType = BaseTProjectType.createTProjectType(projectTypeBean);
			tProjectType.save();
			return tProjectType.getObjectID();
		} catch (Exception e) {
			LOGGER.error("Saving of projectType failed with " + e.getMessage());
			return null;
		}	
	}
	@Override
	public void delete(Integer objectID){
		replaceAndDelete(objectID,null);
	}
	private List<TProjectTypeBean> convertTorqueListToBeanList(List<TProjectType> torqueList) {		
		List<TProjectTypeBean> beanList = new LinkedList<TProjectTypeBean>();
		if (torqueList!=null){
			Iterator<TProjectType> itrTorqueList = torqueList.iterator();
			while (itrTorqueList.hasNext()){
				beanList.add(itrTorqueList.next().getBean());
			}
		}
		return beanList;
	}
}
