/**
 * Genji Scrum Tool and Issue Tracker
 * Copyright (C) 2015 Steinbeis GmbH & Co. KG Task Management Solutions

 * <a href="http://www.trackplus.com">Genji Scrum Tool</a>

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* $Id:$ */


package com.aurel.track.persist;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

import com.aurel.track.beans.TProjectCategoryBean;
import com.aurel.track.dao.SubprojectDAO;

/** 
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Fri Jun 14 20:06:48 GMT+02:00 2002]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class TProjectCategoryPeer 
    extends com.aurel.track.persist.BaseTProjectCategoryPeer
    implements SubprojectDAO
{
    private static final long serialVersionUID = -7281572363115297310L;
    
    private static final Logger LOGGER = LogManager.getLogger(TProjectCategoryPeer.class);
    
    private static Class[] deleteWithWorkitemPeerClasses = {
    	TNotifyPeer.class,
    	//TWorkItemPeer.class, //overloaded doDelete
    	//use the superclass doDelete() methode!!!
    	BaseTProjectCategoryPeer.class,
    	
    };
    
    private static String[] deleteWithWorkitemFields = {
    	TNotifyPeer.PROJCATKEY,
    	//TWorkItemPeer.PROJCATKEY,
    	BaseTProjectCategoryPeer.PKEY
    };
    
    /**
	 * Deletes the TProjectCategories satisfying a certain criteria 
	 * together with the dependent database entries 
	 * @param crit
	 */
	public static void doDelete(Criteria crit)  {
		List<TProjectCategory> list = null;
		try {
			list = doSelect(crit);
		} catch (TorqueException e) {
			LOGGER.error("Getting the list of TProjectCategorys to be deleted failed with " + e.getMessage(), e);
		}			
        if (list == null || list.size() < 1) {
            return;
        }
		Iterator<TProjectCategory> iter = list.iterator();
        TProjectCategory tProjectCategory = null;
		while(iter.hasNext()) {
			tProjectCategory = iter.next();
			LOGGER.warn("Deleting the issues from projectID " + tProjectCategory.getProjectID() + 
					" and subprojectID " + tProjectCategory.getObjectID() + " subprojectName " + tProjectCategory.getLabel());
			ReflectionHelper.delete(deleteWithWorkitemPeerClasses, deleteWithWorkitemFields, tProjectCategory.getObjectID());
		}
	}
       
	/**
	 * Loads a list with subprojectBeans with the defined subprojects for a project  
	 * @param projectID 
	 * @return
	 */
	public List<TProjectCategoryBean> loadByProject(Integer projectID) {		
		if (projectID==null) {
			return new ArrayList<TProjectCategoryBean>();
		}
        Criteria crit = new Criteria();     
        crit.add(PROJKEY, projectID);
        crit.addAscendingOrderByColumn(LABEL);
    	try {
    		return convertTorqueListToBeanList(doSelect(crit));
        } catch (Exception e) {
            LOGGER.error("Loading the subprojects for project " + projectID + " failed with " + e.getMessage(), e);
            return null;
        }		
	}
	
	private static List<TProjectCategoryBean> convertTorqueListToBeanList(List<TProjectCategory> torqueList) {		
		List<TProjectCategoryBean> beanList = new ArrayList<TProjectCategoryBean>();
		if (torqueList!=null){
			Iterator<TProjectCategory> itrTorqueList = torqueList.iterator();
			while (itrTorqueList.hasNext()){
				beanList.add(((TProjectCategory)itrTorqueList.next()).getBean());
			}
		}
		return beanList;
	}
	
}
