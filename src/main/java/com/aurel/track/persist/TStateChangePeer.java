/**
 * Genji Scrum Tool and Issue Tracker
 * Copyright (C) 2015 Steinbeis GmbH & Co. KG Task Management Solutions

 * <a href="http://www.trackplus.com">Genji Scrum Tool</a>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* $Id:$ */

package com.aurel.track.persist;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

import com.aurel.track.beans.TStateChangeBean;
import com.aurel.track.dao.StateChangeDAO;
import com.aurel.track.dao.torque.SimpleCriteria;
import com.workingdogs.village.Record;

/** 
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Fri Jun 14 10:06:48 GMT+02:00 2002]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class TStateChangePeer 
    extends com.aurel.track.persist.BaseTStateChangePeer
    implements StateChangeDAO
{

    private static final long serialVersionUID = -5035864205070010007L;
    
    private static final Logger LOGGER = LogManager.getLogger(TStateChangePeer.class);
    
    /**
	 * Gets the maximal objectID
	 */
	@Override
	public Integer getMaxObjectID() {
		String max = "max(" + STATECHANGEKEY + ")";
		Criteria crit = new Criteria();		
		crit.addSelectColumn(max);
		try {
			return ((Record) doSelectVillageRecords(crit).get(0)).getValue(1).asIntegerObj();
		} catch (Exception e) {
			LOGGER.error("Getting the maximal objectID failed with " + e.getMessage());
		}
		return null;
	}
	
	/**
	 * Gets the next chunk
	 * @param actualValue
	 * @param chunkInterval
	 * @return
	 */
	@Override
	public List<TStateChangeBean> getNextChunk(Integer actualValue, Integer chunkInterval) {
		List torqueList = new ArrayList();
		SimpleCriteria crit = new SimpleCriteria();
		int toValue = actualValue.intValue() + chunkInterval.intValue();
		crit.addIsBetween(STATECHANGEKEY, actualValue.intValue(), toValue);
		crit.addAscendingOrderByColumn(LASTEDIT);
		try {
			torqueList = doSelect(crit);
		} catch (TorqueException e) {
			LOGGER.error("Getting the state changes from " + actualValue + " to " + toValue + " failed with " + e.getMessage());
		}
		return convertTorqueListToBeanList(torqueList);
	}
	
	/**
	 * Load all StateChangeBeans 
	 * @return
	 */
	@Override
	public List loadAll() {
		List torqueList = new ArrayList();
		Criteria crit = new Criteria();
		crit.addAscendingOrderByColumn(LASTEDIT);
		try {
			torqueList = doSelect(crit);
		} catch (TorqueException e) {
			LOGGER.error("Getting the state changes for all workItems failed with " + e.getMessage());
		}
		return convertTorqueListToBeanList(torqueList);
	}
		
	/**
	 * Saves a StateChangeBean in the TStateChange table
	 * @param stateChangeBean
	 * @return
	 */
	@Override
	public Integer save(TStateChangeBean stateChangeBean) {
		TStateChange tStateChange;		
		try {
			tStateChange = BaseTStateChange.createTStateChange(stateChangeBean);
			tStateChange.save();
			return tStateChange.getObjectID();
		} catch (Exception e) {
			LOGGER.error("Saving of a state change failed with " + e.getMessage());
			return null;
		}	
	}
	
	private static List convertTorqueListToBeanList(List torqueList) {
		List beanList = new ArrayList();
		if (torqueList!=null){
			Iterator itrTorqueList = torqueList.iterator();
			while (itrTorqueList.hasNext()){
				beanList.add(((TStateChange)itrTorqueList.next()).getBean());
			}
		}
		return beanList;
	}
    

}
