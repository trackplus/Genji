/**
 * Genji Scrum Tool and Issue Tracker
 * Copyright (C) 2015 Steinbeis GmbH & Co. KG Task Management Solutions

 * <a href="http://www.trackplus.com">Genji Scrum Tool</a>

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* $Id:$ */

package com.aurel.track.persist;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.apache.torque.util.Criteria;

import com.aurel.track.beans.TProjectAccountBean;
import com.aurel.track.dao.ProjectAccountDAO;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Fri Jan 06 10:20:20 CET 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class TProjectAccountPeer
    extends com.aurel.track.persist.BaseTProjectAccountPeer
    implements ProjectAccountDAO
{

    private static final long serialVersionUID = 2117466278249776010L;
    
    private static final Logger LOGGER = LogManager.getLogger(TProjectAccountPeer.class);	
    
    /**
     * @return List with all available TProjectAccount objects 
     * @throws Exception
     */
    public static List load() {
        Criteria crit = new Criteria();
        crit.addJoin(BaseTProjectAccountPeer.ACCOUNT, BaseTAccountPeer.OBJECTID);
        crit.addJoin(BaseTProjectAccountPeer.PROJECT, BaseTProjectPeer.PKEY);
        crit.addAscendingOrderByColumn(BaseTProjectPeer.LABEL);
        crit.addAscendingOrderByColumn(BaseTAccountPeer.ACCOUNTNUMBER);        
        try
	    {	        
	    	return doSelect(crit);
	    }
    	catch(Exception e)
    	{
    		LOGGER.error("Loading the accounts to projects failed with " + e);
    		return null;
    	}
    }
    
    /**
     * @return List with all TProjectAccount objects for a project 
     * @throws Exception
     */
	public static List<TProjectAccount> loadByProject(Integer project) {
    	if (project==null)
		{
			return null;
		}
        Criteria crit = new Criteria();
        crit.add(BaseTProjectAccountPeer.PROJECT, project);
        crit.addJoin(BaseTProjectAccountPeer.ACCOUNT, BaseTAccountPeer.OBJECTID);                
        crit.addAscendingOrderByColumn(BaseTAccountPeer.ACCOUNTNUMBER);        
        try
	    {	        
	    	return doSelect(crit);
	    }
    	catch(Exception e)
    	{
    		LOGGER.error("Loading the accounts by projects with key " + project + " failed with " + e);
    		return null;
    	}
    }

    public void insertByProjectAndAccount(Integer project, Integer account) {
		Criteria crit = new Criteria();
		crit.add(PROJECT, project);
		crit.add(ACCOUNT, account);
		try {			
			List projectToAccount = doSelect(crit);
			if (projectToAccount == null || projectToAccount.isEmpty()) {
				TProjectAccountBean tProjectAccountBean = new TProjectAccountBean();
				tProjectAccountBean.setProject(project);
				tProjectAccountBean.setAccount(account);				
				save(tProjectAccountBean);
				//doInsert(crit);
			}
		}
		catch (Exception e) {
			LOGGER.error("Inserting a TPROJECTACCOUNT entry by keys " + project + ", " + account + " failed with " + e);
		}
	}
    
    /**
	 * Loads the projectAccountBeans by project  
	 * @param projectID 
	 */
	public List<TProjectAccountBean> loadByProject1(Integer projectID) {
		Criteria crit = new Criteria();
		crit.add(PROJECT, projectID);		
		try {			
			return convertTorqueListToBeanList(doSelect(crit));
		} catch (Exception e) {
			LOGGER.error("Loading the  projectAccountBean by project " + projectID + " failed with " + e);
			return null;
		}
	}
    
    /**
	 * Saves a projectAccountBean in the TProjectAccountBean table
	 * @param projectAccountBean
	 * @return
	 */
	public void save(TProjectAccountBean projectAccountBean) {
		TProjectAccount tProjectAccount;		
		try {
			tProjectAccount = BaseTProjectAccount.createTProjectAccount(projectAccountBean);
			tProjectAccount.save();			
		} catch (Exception e) {
			LOGGER.error("Saving of the projectAccountBean failed with " + e.getMessage(), e);			
		}		
	}
    
	/**
	 * Deletes an projectAccountBean by project and account  
	 * @param projectID
	 * @param accountID
	 */
    public void deleteByProjectAndAccount(Integer projectID, Integer accountID) {		
		Criteria crit = new Criteria();
		crit.add(PROJECT, projectID);
		crit.add(ACCOUNT, accountID);
		try {			
			doDelete(crit);
		} catch (Exception e) {
			LOGGER.error("Deleting a projectAccount by project " + projectID + " and account " + accountID + " failed with " + e);
		}
	}
    
    public static List<TProjectAccountBean> convertTorqueListToBeanList(List<TProjectAccount> torqueList) {		
		List<TProjectAccountBean> beanList = new LinkedList<TProjectAccountBean>();
		if (torqueList!=null){
			Iterator<TProjectAccount> itrTorqueList = torqueList.iterator();
			while (itrTorqueList.hasNext()){
				beanList.add(itrTorqueList.next().getBean());
			}
		}
		return beanList;
	}
    
}
