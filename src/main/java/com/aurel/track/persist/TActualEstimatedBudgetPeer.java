/**
 * Genji Scrum Tool and Issue Tracker
 * Copyright (C) 2015 Steinbeis GmbH & Co. KG Task Management Solutions

 * <a href="http://www.trackplus.com">Genji Scrum Tool</a>

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* $Id:$ */

package com.aurel.track.persist;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Criteria.Criterion;

import com.aurel.track.admin.customize.category.filter.execute.loadItems.criteria.TreeFilterCriteria;
import com.aurel.track.admin.customize.category.filter.tree.design.FilterUpperTO;
import com.aurel.track.admin.customize.category.filter.tree.design.RACIBean;
import com.aurel.track.beans.TActualEstimatedBudgetBean;
import com.aurel.track.beans.TPersonBean;
import com.aurel.track.dao.ActualEstimatedBudgetDAO;
import com.aurel.track.errors.ErrorData;
import com.aurel.track.tql.TqlBL;
import com.aurel.track.util.GeneralUtils;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Mon Mar 27 14:21:55 EEST 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class TActualEstimatedBudgetPeer
	extends com.aurel.track.persist.BaseTActualEstimatedBudgetPeer
	implements ActualEstimatedBudgetDAO
{	
	private static final long serialVersionUID = -4415701056386703443L;
	
	private static final Logger LOGGER = LogManager.getLogger(TActualEstimatedBudgetPeer.class);
	

	/**
	 * Loads the last ActualEstimatedBudgetBean by workItemKey 
	 * @param objectID
	 * @return
	 */
	public TActualEstimatedBudgetBean loadByWorkItemKey(Integer workItemKey) {
		if (workItemKey==null) {
			return null;
		}
		Criteria crit = new Criteria();
		crit.add(WORKITEMKEY, workItemKey);
		try {
			List<TActualEstimatedBudget> list = doSelect(crit);
			if (list!=null && !list.isEmpty()) {
				return list.get(0).getBean();
			}
			
		} catch(Exception e) {
			LOGGER.error("Loading the actual estimated budget by workItemKey " + workItemKey + " failed with " + e);
		}
		return null;
	}

	/**
	 * Loads a ActualEstimatedbudgetBean list by workItemKeys
	 * @param workItemKeys
	 * @return
	 */
	public List<TActualEstimatedBudgetBean> loadByWorkItemKeys(int[] workItemIDs) {
		List<TActualEstimatedBudgetBean> remainingBudgets = new LinkedList<TActualEstimatedBudgetBean>();
		if (workItemIDs==null || workItemIDs.length==0) {
			return remainingBudgets;
		}
		Criteria criteria;
		List<int[]> workItemIDChunksList = GeneralUtils.getListOfChunks(workItemIDs);
		if (workItemIDChunksList==null) {
			return remainingBudgets;
		}
		Iterator<int[]> iterator = workItemIDChunksList.iterator();
		while (iterator.hasNext()) {
			int[] workItemIDChunk = iterator.next();
			criteria = new Criteria();
			criteria.addIn(WORKITEMKEY, workItemIDChunk);
			try {
				remainingBudgets.addAll(getFilterRemainingPlans(criteria));
			} catch(Exception e) {
				LOGGER.error("Loading the remaining budgets by workItemIDs failed with " + e.getMessage(), e);
			}
		}
		return remainingBudgets;
	}
	
	/**
	 * Adds filter criteria
	 * @param criteria
	 * @return
	 * @throws TorqueException 
	 */
	private static List<TActualEstimatedBudgetBean> getFilterRemainingPlans(Criteria criteria) throws TorqueException {
		criteria.addJoin(TWorkItemPeer.WORKITEMKEY, WORKITEMKEY);
		Criterion hoursCriterion =  criteria.getNewCriterion(ESTIMATEDHOURS, null, Criteria.ISNOTNULL);
		Criterion costCriterion =  criteria.getNewCriterion(ESTIMATEDCOST, null, Criteria.ISNOTNULL);
		criteria.add(hoursCriterion.or(costCriterion));
		return convertTorqueListToBeanList(doSelect(criteria));
	}
	
	/**
	 * Loads the remaining values for a tree filter
	 * @param filterUpperTO
	 * @param raciBean
	 * @param personID
	 * @param computedValueTypes
	 * @return
	 */
	public List<TActualEstimatedBudgetBean> loadByTreeFilter(FilterUpperTO filterUpperTO, RACIBean raciBean, Integer personID) {
		Integer[] selectedProjects = filterUpperTO.getSelectedProjects();
		if (selectedProjects==null  || selectedProjects.length==0) {
			//at least one selected project needed
			return new ArrayList<TActualEstimatedBudgetBean>();
		}		
		Criteria criteria = TreeFilterCriteria.prepareTreeFilterCriteria(filterUpperTO, raciBean, personID);
		try {
			return getFilterRemainingPlans(criteria);
		} catch (TorqueException e) {
			LOGGER.error("Loading the remaining values for tree filter and personID " + personID + " failed with " + e.getMessage(), e);
			return new ArrayList<TActualEstimatedBudgetBean>();
		}
	}
		
	/**
	 * Get the remaining values for a TQL expression
	 * @param tqlExpression
	 * @param personBean
	 * @param locale
	 * @param errors
	 * @param computedValueTypes
	 * @return
	 */
	public List<TActualEstimatedBudgetBean> loadByTQLFilter(String tqlExpression, TPersonBean personBean, Locale locale, List<ErrorData> errors) {
		Criteria criteria = TqlBL.createCriteria(tqlExpression, personBean, locale, errors);
		try {
			return getFilterRemainingPlans(criteria);
		} catch (TorqueException e) {
			LOGGER.error("Loading the remaining values for TQL filter " + tqlExpression + " failed with " + e.getMessage(), e);
			return new ArrayList<TActualEstimatedBudgetBean>();
		}
	}
	
	/**
	 * Saves an ActualEstimatedBudgetBean in the TActualEstimatedBudget table
	 * @param baseLineBean
	 * @return
	 */
	public Integer save(TActualEstimatedBudgetBean actualEstimatedbudgetBean) {
		try {
			TActualEstimatedBudget tActualEstimatedBudget = BaseTActualEstimatedBudget.createTActualEstimatedBudget(actualEstimatedbudgetBean);
			tActualEstimatedBudget.save();
			return tActualEstimatedBudget.getObjectID();
		} catch (Exception e) {
			LOGGER.error("Saving of a actual estimated budget failed with " + e.getMessage(), e);
			return null;
		}
	}
	
	/**
	 * Deletes a remaining plan by primary key
	 * @param workItemID
	 */
	public void deleteByWorkItem(Integer workItemID) {
		Criteria crit = new Criteria();
		crit.add(WORKITEMKEY, workItemID);
		try {
			doDelete(crit);
		} catch (TorqueException e) {
			LOGGER.error("Deleting a remaining plan for workItemID " + workItemID + " failed with: " + e);
		}
	}

	private static List<TActualEstimatedBudgetBean> convertTorqueListToBeanList(List<TActualEstimatedBudget> torqueList) {
		List<TActualEstimatedBudgetBean> beanList = new LinkedList<TActualEstimatedBudgetBean>();
		if (torqueList!=null) {
			for (TActualEstimatedBudget tActualEstimatedBudget : torqueList) {
				beanList.add(tActualEstimatedBudget.getBean());
			}
		}
		return beanList;
	}

}
